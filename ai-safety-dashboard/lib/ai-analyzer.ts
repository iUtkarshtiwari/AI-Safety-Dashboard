// Enhanced NLP-based severity analyzer

// Utility functions for text processing
function tokenize(text: string): string[] {
  // Basic tokenization - split by spaces and remove punctuation
  return text
    .toLowerCase()
    .replace(/[^\w\s]/g, " ")
    .split(/\s+/)
    .filter((token) => token.length > 0)
}

// English stopwords list
const stopwords = new Set([
  "a",
  "an",
  "the",
  "and",
  "or",
  "but",
  "is",
  "are",
  "was",
  "were",
  "be",
  "been",
  "being",
  "in",
  "on",
  "at",
  "to",
  "for",
  "with",
  "by",
  "about",
  "against",
  "between",
  "into",
  "through",
  "during",
  "before",
  "after",
  "above",
  "below",
  "from",
  "up",
  "down",
  "of",
  "off",
  "over",
  "under",
  "again",
  "further",
  "then",
  "once",
  "here",
  "there",
  "when",
  "where",
  "why",
  "how",
  "all",
  "any",
  "both",
  "each",
  "few",
  "more",
  "most",
  "other",
  "some",
  "such",
  "no",
  "nor",
  "not",
  "only",
  "own",
  "same",
  "so",
  "than",
  "too",
  "very",
  "can",
  "will",
  "just",
  "should",
  "now",
])

function removeStopwords(tokens: string[]): string[] {
  return tokens.filter((token) => !stopwords.has(token))
}

// Extract n-grams from text
function extractNgrams(tokens: string[], n: number): string[] {
  const ngrams: string[] = []
  for (let i = 0; i <= tokens.length - n; i++) {
    ngrams.push(tokens.slice(i, i + n).join(" "))
  }
  return ngrams
}

// Calculate term frequency
function calculateTermFrequency(tokens: string[]): Record<string, number> {
  const tf: Record<string, number> = {}
  tokens.forEach((token) => {
    tf[token] = (tf[token] || 0) + 1
  })
  return tf
}

// Sentiment analysis - very basic implementation
function analyzeSentiment(text: string): { score: number; magnitude: number } {
  const positiveWords = new Set([
    "good",
    "great",
    "excellent",
    "positive",
    "success",
    "successful",
    "resolved",
    "fixed",
    "improved",
    "improvement",
    "enhance",
    "enhanced",
    "benefit",
    "beneficial",
    "advantage",
    "effective",
    "efficiently",
    "properly",
    "correct",
    "correctly",
    "accurate",
    "accurately",
    "safe",
    "secure",
    "protected",
    "protection",
    "reliable",
    "stability",
    "stable",
  ])

  const negativeWords = new Set([
    "bad",
    "terrible",
    "poor",
    "negative",
    "fail",
    "failed",
    "failure",
    "issue",
    "problem",
    "error",
    "bug",
    "defect",
    "flaw",
    "incorrect",
    "inaccurate",
    "wrong",
    "mistake",
    "mislead",
    "misleading",
    "dangerous",
    "harmful",
    "damage",
    "damaging",
    "risk",
    "risky",
    "threat",
    "vulnerable",
    "vulnerability",
    "exploit",
    "attack",
    "compromise",
    "compromised",
    "breach",
    "violation",
    "violate",
    "illegal",
    "unauthorized",
    "unintended",
    "unexpected",
    "unpredicted",
    "bias",
    "biased",
    "discriminate",
    "discrimination",
    "unfair",
    "unethical",
    "inappropriate",
    "leak",
    "leakage",
    "expose",
    "exposed",
    "disclosure",
    "confidential",
    "private",
    "sensitive",
    "critical",
    "severe",
    "serious",
    "major",
    "significant",
    "substantial",
    "considerable",
    "emergency",
    "urgent",
    "immediate",
    "priority",
    "high-priority",
    "escalate",
    "escalation",
    "incident",
    "accident",
    "crash",
    "breakdown",
    "malfunction",
    "outage",
    "downtime",
    "unavailable",
    "inaccessible",
    "unresponsive",
    "slow",
    "performance",
    "latency",
    "delay",
    "timeout",
    "hang",
    "freeze",
    "stuck",
    "corrupt",
    "corrupted",
    "invalid",
    "inconsistent",
    "hallucination",
    "fabrication",
    "fabricated",
    "false",
    "fake",
    "deceptive",
    "misrepresent",
  ])

  const intensifiers = new Set([
    "very",
    "extremely",
    "highly",
    "severely",
    "seriously",
    "critically",
    "completely",
    "totally",
    "absolutely",
    "entirely",
    "fully",
    "greatly",
    "significantly",
    "substantially",
    "considerably",
    "extensively",
    "immensely",
    "tremendously",
    "exceptionally",
    "extraordinarily",
  ])

  const tokens = tokenize(text)
  let score = 0
  let magnitude = 0
  let intensifierCount = 0

  tokens.forEach((token) => {
    if (positiveWords.has(token)) {
      score += 1
      magnitude += 1
    } else if (negativeWords.has(token)) {
      score -= 1
      magnitude += 1
    } else if (intensifiers.has(token)) {
      intensifierCount += 1
    }
  })

  // Apply intensifier effect
  if (intensifierCount > 0 && magnitude > 0) {
    const intensifierFactor = 1 + intensifierCount * 0.2
    score *= intensifierFactor
    magnitude *= intensifierFactor
  }

  return { score, magnitude }
}

// Entity recognition for AI-related terms
function extractAIEntities(text: string): string[] {
  const aiTerms = [
    "ai",
    "artificial intelligence",
    "machine learning",
    "ml",
    "deep learning",
    "neural network",
    "algorithm",
    "model",
    "llm",
    "large language model",
    "gpt",
    "chatgpt",
    "bert",
    "transformer",
    "recommendation system",
    "recommendation algorithm",
    "facial recognition",
    "computer vision",
    "natural language processing",
    "nlp",
    "chatbot",
    "virtual assistant",
    "automated",
    "automation",
    "classifier",
    "classification",
    "prediction",
    "predictive",
    "decision-making",
    "autonomous",
    "training data",
    "dataset",
    "data set",
    "training set",
    "test set",
    "validation",
    "inference",
    "prompt",
    "completion",
    "token",
    "tokenization",
    "embedding",
    "vector",
    "parameter",
    "weight",
    "bias",
    "activation",
    "function",
    "layer",
    "hidden layer",
    "input layer",
    "output layer",
    "backpropagation",
    "gradient descent",
    "loss function",
    "cost function",
    "optimization",
    "hyperparameter",
    "fine-tuning",
    "pre-training",
    "transfer learning",
    "reinforcement learning",
    "supervised learning",
    "unsupervised learning",
    "clustering",
    "classification",
    "regression",
    "generative",
    "discriminative",
    "adversarial",
    "gan",
    "generative adversarial network",
    "attention",
    "self-attention",
    "transformer",
    "encoder",
    "decoder",
    "sequence-to-sequence",
    "feature extraction",
    "feature engineering",
    "dimensionality reduction",
    "pca",
    "svd",
    "overfitting",
    "underfitting",
    "regularization",
    "dropout",
    "batch normalization",
    "convolutional",
    "cnn",
    "recurrent",
    "rnn",
    "lstm",
    "gru",
    "residual",
    "resnet",
    "computer vision",
    "image recognition",
    "object detection",
    "semantic segmentation",
    "instance segmentation",
    "pose estimation",
    "optical character recognition",
    "ocr",
    "speech recognition",
    "speech synthesis",
    "text-to-speech",
    "tts",
    "speech-to-text",
    "machine translation",
    "sentiment analysis",
    "named entity recognition",
    "ner",
    "question answering",
    "summarization",
    "text generation",
    "text classification",
    "recommendation",
    "collaborative filtering",
    "content-based filtering",
    "hybrid filtering",
    "anomaly detection",
    "fraud detection",
    "outlier detection",
    "time series",
    "forecasting",
    "prediction",
    "predictive maintenance",
    "predictive analytics",
    "prescriptive analytics",
    "descriptive analytics",
    "diagnostic analytics",
    "explainable ai",
    "xai",
    "interpretability",
    "black box",
    "white box",
    "transparency",
    "accountability",
    "fairness",
    "bias",
    "ethics",
    "responsible ai",
    "trustworthy ai",
    "ai safety",
    "ai alignment",
    "ai governance",
    "ai regulation",
    "ai policy",
    "ai standards",
    "ai guidelines",
    "ai principles",
    "ai ethics",
    "ai bias",
    "ai fairness",
    "ai transparency",
    "ai accountability",
    "ai explainability",
    "ai interpretability",
    "ai safety",
    "ai security",
    "ai privacy",
    "ai robustness",
    "ai reliability",
    "ai resilience",
    "ai assurance",
    "ai certification",
    "ai auditing",
    "ai testing",
    "ai validation",
    "ai verification",
    "ai monitoring",
    "ai evaluation",
    "ai assessment",
    "ai benchmarking",
    "ai performance",
    "ai metrics",
    "ai kpis",
    "ai roi",
    "ai tco",
    "ai value",
    "ai impact",
    "ai adoption",
    "ai transformation",
    "ai strategy",
    "ai roadmap",
    "ai maturity",
    "ai capability",
    "ai readiness",
    "ai literacy",
  ]

  const entities: string[] = []
  const lowerText = text.toLowerCase()

  aiTerms.forEach((term) => {
    if (lowerText.includes(term)) {
      entities.push(term)
    }
  })

  return entities
}

// Define severity categories and their associated terms
const severityCategories = {
  high: {
    terms: [
      "critical",
      "severe",
      "serious",
      "major",
      "significant",
      "substantial",
      "considerable",
      "emergency",
      "urgent",
      "immediate",
      "priority",
      "high-priority",
      "escalate",
      "escalation",
      "dangerous",
      "harmful",
      "damage",
      "damaging",
      "risk",
      "risky",
      "threat",
      "death",
      "fatal",
      "lethal",
      "deadly",
      "life-threatening",
      "catastrophic",
      "disaster",
      "disastrous",
      "crisis",
      "critical failure",
      "critical error",
      "critical vulnerability",
      "critical issue",
      "critical bug",
      "critical defect",
      "critical flaw",
      "critical problem",
      "critical incident",
      "high risk",
      "high impact",
      "high severity",
      "high priority",
      "high urgency",
      "security breach",
      "data breach",
      "privacy breach",
      "confidentiality breach",
      "integrity breach",
      "availability breach",
      "authentication breach",
      "authorization breach",
      "access control breach",
      "privilege escalation",
      "unauthorized access",
      "unauthorized use",
      "unauthorized disclosure",
      "unauthorized modification",
      "unauthorized deletion",
      "information disclosure",
      "data leak",
      "data leakage",
      "data exposure",
      "data loss",
      "data corruption",
      "data theft",
      "data exfiltration",
      "data tampering",
      "data manipulation",
      "system compromise",
      "system breach",
      "system intrusion",
      "system penetration",
      "system exploitation",
      "system takeover",
      "system hijacking",
      "system sabotage",
      "system disruption",
      "system destruction",
      "system damage",
      "system failure",
      "service disruption",
      "service outage",
      "service degradation",
      "service unavailability",
      "denial of service",
      "distributed denial of service",
      "dos",
      "ddos",
      "resource exhaustion",
      "resource depletion",
      "resource starvation",
      "resource consumption",
      "resource abuse",
      "performance degradation",
      "performance impact",
      "performance issue",
      "performance problem",
      "latency increase",
      "response time increase",
      "timeout increase",
      "error rate increase",
      "failure rate increase",
      "incident rate increase",
      "issue rate increase",
      "problem rate increase",
      "vulnerability exploitation",
      "vulnerability abuse",
      "vulnerability misuse",
      "exploit",
      "exploitation",
      "attack",
      "attacking",
      "compromise",
      "compromising",
      "breach",
      "breaching",
      "intrusion",
      "intruding",
      "penetration",
      "penetrating",
      "takeover",
      "taking over",
      "hijacking",
      "hijack",
      "sabotage",
      "sabotaging",
      "disruption",
      "disrupting",
      "destruction",
      "destroying",
      "damage",
      "damaging",
      "harm",
      "harming",
      "injury",
      "injuring",
      "death",
      "killing",
      "fatal",
      "lethal",
      "deadly",
      "life-threatening",
      "catastrophic",
      "disastrous",
      "crisis",
      "critical",
      "hallucination",
      "fabrication",
      "fabricated",
      "false",
      "fake",
      "deceptive",
      "misrepresent",
      "bias",
      "biased",
      "discriminate",
      "discrimination",
      "unfair",
      "unethical",
      "inappropriate",
    ],
    weight: 3,
  },
  medium: {
    terms: [
      "moderate",
      "medium",
      "intermediate",
      "middle",
      "mid",
      "average",
      "normal",
      "standard",
      "regular",
      "ordinary",
      "common",
      "typical",
      "usual",
      "expected",
      "anticipated",
      "known",
      "familiar",
      "recognized",
      "acknowledged",
      "accepted",
      "tolerated",
      "manageable",
      "controllable",
      "handleable",
      "addressable",
      "fixable",
      "solvable",
      "resolvable",
      "remediable",
      "mitigatable",
      "treatable",
      "curable",
      "healable",
      "recoverable",
      "repairable",
      "restoreable",
      "reversible",
      "undoable",
      "fixable",
      "non-critical",
      "non-severe",
      "non-serious",
      "non-major",
      "non-significant",
      "non-substantial",
      "non-considerable",
      "non-emergency",
      "non-urgent",
      "non-immediate",
      "low-priority",
      "low-urgency",
      "low-impact",
      "low-risk",
      "low-threat",
      "minor issue",
      "minor problem",
      "minor incident",
      "minor bug",
      "minor defect",
      "minor flaw",
      "minor error",
      "minor vulnerability",
      "minor weakness",
      "minor gap",
      "minor shortcoming",
      "minor limitation",
      "minor restriction",
      "minor constraint",
      "minor impediment",
      "minor obstacle",
      "minor barrier",
      "minor hurdle",
      "minor challenge",
      "minor difficulty",
      "minor complication",
      "minor complexity",
      "minor intricacy",
      "minor nuance",
      "minor subtlety",
      "minor detail",
      "minor aspect",
      "minor factor",
      "minor element",
      "minor component",
      "minor part",
      "minor piece",
      "minor segment",
      "minor section",
      "minor portion",
      "minor fraction",
      "minor percentage",
      "minor amount",
      "minor quantity",
      "minor volume",
      "minor number",
      "minor count",
      "minor tally",
      "minor sum",
      "minor total",
      "minor aggregate",
      "minor collection",
      "minor set",
      "minor group",
      "minor cluster",
      "minor batch",
      "minor lot",
      "minor series",
      "minor sequence",
      "minor succession",
      "minor progression",
      "minor chain",
      "minor string",
      "minor stream",
      "minor flow",
      "minor current",
      "minor tide",
      "minor wave",
      "minor ripple",
      "minor fluctuation",
      "minor variation",
      "minor deviation",
      "minor divergence",
      "minor difference",
      "minor discrepancy",
      "minor disparity",
      "minor dissimilarity",
      "minor distinction",
      "minor contrast",
      "minor comparison",
      "incorrect",
      "inaccurate",
      "wrong",
      "erroneous",
      "mistaken",
      "flawed",
      "faulty",
      "defective",
      "buggy",
      "glitchy",
      "problematic",
      "troublesome",
      "troubling",
      "concerning",
      "worrying",
      "worrisome",
      "alarming",
      "disturbing",
      "unsettling",
      "disquieting",
      "disconcerting",
      "perturbing",
      "troubling",
      "vexing",
      "annoying",
      "irritating",
      "frustrating",
      "exasperating",
      "infuriating",
      "maddening",
      "mislead",
      "misleading",
      "misguide",
      "misguiding",
      "misinform",
      "misinforming",
      "misrepresent",
      "misrepresenting",
      "misstate",
      "misstating",
      "misreport",
      "misreporting",
      "misquote",
      "misquoting",
      "miscite",
      "misciting",
      "misattribute",
      "misattributing",
      "mischaracterize",
      "mischaracterizing",
      "misinterpret",
      "misinterpreting",
      "misunderstand",
      "misunderstanding",
      "misconceive",
      "misconceiving",
      "misconstrue",
      "misconstruing",
      "misapprehend",
      "misapprehending",
      "misjudge",
      "misjudging",
      "misestimate",
      "misestimating",
      "miscalculate",
      "miscalculating",
      "miscompute",
      "miscomputing",
      "miscount",
      "miscounting",
      "misreckon",
      "misreckoning",
      "misgauge",
      "misgauging",
      "misevaluate",
      "misevaluating",
      "misassess",
      "misassessing",
      "misappraise",
      "misappraising",
      "misrate",
      "misrating",
      "misgrade",
      "misgrading",
      "misrank",
      "misranking",
      "misclassify",
      "misclassifying",
      "miscategorize",
      "miscategorizing",
      "mislabel",
      "mislabeling",
      "mistag",
      "mistagging",
      "mismark",
      "mismarking",
      "misidentify",
      "misidentifying",
      "misrecognize",
      "misrecognizing",
      "misdiagnose",
      "misdiagnosing",
      "mistreat",
      "mistreating",
      "mishandle",
      "mishandling",
      "mismanage",
      "mismanaging",
      "misadminister",
      "misadministering",
      "misgovern",
      "misgoverning",
      "misrule",
      "misruling",
      "misregulate",
      "misregulating",
      "miscontrol",
      "miscontrolling",
      "misdirect",
      "misdirecting",
      "misguide",
      "misguiding",
      "mislead",
      "misleading",
      "misadvise",
      "misadvising",
      "miscounsel",
      "miscounseling",
      "misinform",
      "misinforming",
      "misinstructs",
    ],
    weight: 2,
  },
  low: {
    terms: [
      "minor",
      "minimal",
      "small",
      "slight",
      "trivial",
      "insignificant",
      "negligible",
      "inconsequential",
      "immaterial",
      "unimportant",
      "irrelevant",
      "meaningless",
      "pointless",
      "worthless",
      "valueless",
      "useless",
      "futile",
      "vain",
      "empty",
      "hollow",
      "shallow",
      "superficial",
      "cosmetic",
      "aesthetic",
      "decorative",
      "ornamental",
      "embellishing",
      "enhancing",
      "improving",
      "upgrading",
      "refining",
      "polishing",
      "perfecting",
      "optimizing",
      "maximizing",
      "minimizing",
      "reducing",
      "decreasing",
      "diminishing",
      "lessening",
      "lowering",
      "dropping",
      "falling",
      "declining",
      "descending",
      "dwindling",
      "shrinking",
      "contracting",
      "narrowing",
      "tightening",
      "constricting",
      "compressing",
      "condensing",
      "concentrating",
      "focusing",
      "centering",
      "targeting",
      "aiming",
      "directing",
      "orienting",
      "aligning",
      "adjusting",
      "tuning",
      "calibrating",
      "setting",
      "configuring",
      "customizing",
      "personalizing",
      "individualizing",
      "tailoring",
      "adapting",
      "modifying",
      "changing",
      "altering",
      "varying",
      "diversifying",
      "differentiating",
      "distinguishing",
      "separating",
      "dividing",
      "splitting",
      "breaking",
      "fracturing",
      "fragmenting",
      "shattering",
      "splintering",
      "cracking",
      "rupturing",
      "bursting",
      "exploding",
      "detonating",
      "igniting",
      "lighting",
      "burning",
      "scorching",
      "searing",
      "singeing",
      "charring",
      "blackening",
      "darkening",
      "dimming",
      "fading",
      "paling",
      "blanching",
      "whitening",
      "lightening",
      "brightening",
      "illuminating",
      "enlightening",
      "informing",
      "educating",
      "teaching",
      "instructing",
      "training",
      "coaching",
      "mentoring",
      "guiding",
      "directing",
      "leading",
      "managing",
      "administering",
      "governing",
      "ruling",
      "controlling",
      "dominating",
      "commanding",
      "ordering",
      "dictating",
      "prescribing",
      "mandating",
      "decreeing",
      "proclaiming",
      "declaring",
      "announcing",
      "stating",
      "asserting",
      "claiming",
      "maintaining",
      "holding",
      "keeping",
      "retaining",
      "preserving",
      "conserving",
      "saving",
      "protecting",
      "defending",
      "guarding",
      "shielding",
      "sheltering",
      "harboring",
      "housing",
      "accommodating",
      "lodging",
      "boarding",
      "hosting",
      "entertaining",
      "amusing",
      "diverting",
      "distracting",
      "preoccupying",
      "engrossing",
      "absorbing",
      "consuming",
      "devouring",
      "eating",
      "drinking",
      "swallowing",
      "gulping",
      "guzzling",
      "chugging",
      "sipping",
      "tasting",
      "sampling",
      "trying",
      "testing",
      "checking",
      "verifying",
      "validating",
      "confirming",
      "affirming",
      "corroborating",
      "substantiating",
      "supporting",
      "backing",
      "endorsing",
      "approving",
      "sanctioning",
      "authorizing",
      "permitting",
      "allowing",
      "enabling",
      "empowering",
      "strengthening",
      "reinforcing",
      "fortifying",
      "bolstering",
      "boosting",
      "enhancing",
      "augmenting",
      "amplifying",
      "magnifying",
      "intensifying",
      "heightening",
      "deepening",
      "enriching",
      "improvement",
      "enhancement",
      "upgrade",
      "refinement",
      "optimization",
      "maximization",
      "minimization",
      "reduction",
      "decrease",
      "diminishment",
      "lessening",
      "lowering",
      "drop",
      "fall",
      "decline",
      "descent",
      "dwindling",
      "shrinkage",
      "contraction",
      "narrowing",
      "tightening",
      "constriction",
      "compression",
      "condensation",
      "concentration",
      "focus",
      "centering",
      "targeting",
      "aiming",
      "direction",
      "orientation",
      "alignment",
      "adjustment",
      "tuning",
      "calibration",
      "setting",
      "configuration",
      "customization",
      "personalization",
      "individualization",
      "tailoring",
      "adaptation",
      "modification",
      "change",
      "alteration",
      "variation",
      "diversification",
      "differentiation",
      "distinction",
      "separation",
      "division",
      "split",
      "break",
      "fracture",
      "fragmentation",
      "shatter",
      "splintering",
      "crack",
      "rupture",
      "burst",
      "explosion",
      "detonation",
      "ignition",
      "lighting",
      "burning",
      "scorching",
      "searing",
      "singeing",
      "charring",
      "blackening",
      "darkening",
      "dimming",
      "fading",
      "paling",
      "blanching",
      "whitening",
      "lightening",
      "brightening",
      "illumination",
      "enlightenment",
      "information",
      "education",
      "teaching",
      "instruction",
      "training",
      "coaching",
      "mentoring",
      "guidance",
      "direction",
      "leadership",
      "management",
      "administration",
      "governance",
      "rule",
      "control",
      "domination",
      "command",
      "order",
      "dictation",
      "prescription",
      "mandate",
      "decree",
      "proclamation",
      "declaration",
      "announcement",
      "statement",
      "assertion",
      "claim",
      "maintenance",
      "holding",
      "keeping",
      "retention",
      "preservation",
      "conservation",
      "saving",
      "protection",
      "defense",
      "guard",
      "shield",
      "shelter",
      "harbor",
      "housing",
      "accommodation",
      "lodging",
      "boarding",
      "hosting",
      "entertainment",
      "amusement",
      "diversion",
      "distraction",
      "preoccupation",
      "engrossment",
      "absorption",
      "consumption",
      "devouring",
      "eating",
      "drinking",
      "swallowing",
      "gulping",
      "guzzling",
      "chugging",
      "sipping",
      "tasting",
      "sampling",
      "trying",
      "testing",
      "checking",
      "verification",
      "validation",
      "confirmation",
      "affirmation",
      "corroboration",
      "substantiation",
      "support",
      "backing",
      "endorsement",
      "approval",
      "sanction",
      "authorization",
      "permission",
      "allowance",
      "enablement",
      "empowerment",
      "strengthening",
      "reinforcement",
      "fortification",
      "bolstering",
      "boost",
      "enhancement",
      "augmentation",
      "amplification",
      "magnification",
      "intensification",
      "heightening",
      "deepening",
      "enrichment",
    ],
    weight: 1,
  },
}

// Extract key phrases that influenced the severity decision
function extractKeyPhrases(text: string, severity: string): string[] {
  const tokens = tokenize(text)
  const phrases: string[] = []

  // Get unigrams
  const unigrams = tokens.filter((token) => {
    for (const [level, data] of Object.entries(severityCategories)) {
      if (level === severity.toLowerCase() && data.terms.includes(token)) {
        return true
      }
    }
    return false
  })

  // Get bigrams
  const bigrams = extractNgrams(tokens, 2).filter((bigram) => {
    for (const [level, data] of Object.entries(severityCategories)) {
      if (level === severity.toLowerCase() && data.terms.includes(bigram)) {
        return true
      }
    }
    return false
  })

  // Get trigrams
  const trigrams = extractNgrams(tokens, 3).filter((trigram) => {
    for (const [level, data] of Object.entries(severityCategories)) {
      if (level === severity.toLowerCase() && data.terms.includes(trigram)) {
        return true
      }
    }
    return false
  })

  return [...trigrams, ...bigrams, ...unigrams].slice(0, 5) // Return top 5 phrases
}

// Main analysis function
export function analyzeSeverity(description: string): {
  severity: string
  confidence: number
  keyFactors: string[]
  keyPhrases: string[]
} {
  // Preprocess text
  const tokens = tokenize(description)
  const cleanTokens = removeStopwords(tokens)

  // Calculate term frequency
  const tf = calculateTermFrequency(cleanTokens)

  // Extract n-grams
  const bigrams = extractNgrams(tokens, 2)
  const trigrams = extractNgrams(tokens, 3)

  // Analyze sentiment
  const sentiment = analyzeSentiment(description)

  // Extract AI entities
  const aiEntities = extractAIEntities(description)

  // Calculate severity scores
  let highScore = 0
  let mediumScore = 0
  let lowScore = 0

  // Score based on term frequency and severity categories
  for (const [token, frequency] of Object.entries(tf)) {
    if (severityCategories.high.terms.includes(token)) {
      highScore += frequency * severityCategories.high.weight
    } else if (severityCategories.medium.terms.includes(token)) {
      mediumScore += frequency * severityCategories.medium.weight
    } else if (severityCategories.low.terms.includes(token)) {
      lowScore += frequency * severityCategories.low.weight
    }
  }

  // Score based on bigrams
  for (const bigram of bigrams) {
    if (severityCategories.high.terms.includes(bigram)) {
      highScore += 2 * severityCategories.high.weight
    } else if (severityCategories.medium.terms.includes(bigram)) {
      mediumScore += 2 * severityCategories.medium.weight
    } else if (severityCategories.low.terms.includes(bigram)) {
      lowScore += 2 * severityCategories.low.weight
    }
  }

  // Score based on trigrams
  for (const trigram of trigrams) {
    if (severityCategories.high.terms.includes(trigram)) {
      highScore += 3 * severityCategories.high.weight
    } else if (severityCategories.medium.terms.includes(trigram)) {
      mediumScore += 3 * severityCategories.medium.weight
    } else if (severityCategories.low.terms.includes(trigram)) {
      lowScore += 3 * severityCategories.low.weight
    }
  }

  // Adjust scores based on sentiment
  if (sentiment.score < -2) {
    highScore += Math.abs(sentiment.score)
  } else if (sentiment.score < 0) {
    mediumScore += Math.abs(sentiment.score)
  } else {
    lowScore += sentiment.score
  }

  // Adjust scores based on text length (longer descriptions often indicate more serious issues)
  const textLength = description.length
  if (textLength > 1000) {
    highScore *= 1.2
  } else if (textLength > 500) {
    highScore *= 1.1
    mediumScore *= 1.1
  }

  // Adjust scores based on AI entity mentions (more specific AI terms might indicate technical severity)
  if (aiEntities.length > 5) {
    highScore *= 1.1
    mediumScore *= 1.1
  }

  // Determine severity based on scores
  let severity = "Low"
  let confidence = 0.5

  const totalScore = highScore + mediumScore + lowScore
  const highPercent = totalScore > 0 ? highScore / totalScore : 0
  const mediumPercent = totalScore > 0 ? mediumScore / totalScore : 0
  const lowPercent = totalScore > 0 ? lowScore / totalScore : 0

  if (highScore > mediumScore && highScore > lowScore) {
    severity = "High"
    confidence = 0.5 + highPercent * 0.5
  } else if (mediumScore > lowScore) {
    severity = "Medium"
    confidence = 0.5 + mediumPercent * 0.5
  } else {
    severity = "Low"
    confidence = 0.5 + lowPercent * 0.5
  }

  // Extract key factors that influenced the decision
  const keyFactors = []

  if (sentiment.score < -2) {
    keyFactors.push("Strong negative sentiment detected")
  }

  if (textLength > 1000) {
    keyFactors.push("Detailed description (high word count)")
  }

  if (aiEntities.length > 3) {
    keyFactors.push(`Multiple AI systems mentioned (${aiEntities.length})`)
  }

  if (highScore > 10) {
    keyFactors.push("Multiple critical terms detected")
  }

  if (mediumScore > 10) {
    keyFactors.push("Multiple concerning terms detected")
  }

  // Extract key phrases that influenced the decision
  const keyPhrases = extractKeyPhrases(description, severity)

  return {
    severity,
    confidence: Number.parseFloat(confidence.toFixed(2)),
    keyFactors,
    keyPhrases,
  }
}
